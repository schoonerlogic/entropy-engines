#!/bin/bash

# Stop execution if any command fails
set -e

# =================================================================
# VARIABLES
# These variables are expected to be interpolated by Terraform's templatefile function.
# =================================================================
S3_BUCKET="${s3_bucket}"
NODE_TYPE="${node_type}"
SCRIPT_DIR="${script_dir}"

echo "$S3_BUCKET: $S3_BUCKET"
echo "$NODE_TYPE: $NODE_TYPE"





# =================================================================
# ENVIRONMENT FILES DOWNLOAD AND VALIDATION
# =================================================================
download_and_validate_environments() {
    echo "=== Downloading Environment files from S3 ==="
    
    # Create the directory path if it doesn't exist
    mkdir -p "$${SCRIPT_DIR}"
    echo "Created SCRIPT_DIR: $${SCRIPT_DIR}"

    # Download with retries
    local download_attempts=3
    local attempt
    for attempt in $(seq 1 $download_attempts); do
        echo "Download attempt $attempt/$download_attempts..."
        
        # Attempt to copy files from S3
        if aws s3 cp "s3://$S3_BUCKET/scripts/$NODE_TYPE/" "$${SCRIPT_DIR}/" --recursive --quiet; then
            echo "Environment files downloaded successfully"
        fi

        if aws s3 cp "s3://$S3_BUCKET/scripts/shared/" "$${SCRIPT_DIR}/" --recursive --quiet; then
            echo "Script files downloaded successfully"
            break
        fi

        
        if [ "$attempt" -eq "$download_attempts" ]; then
            echo "ERROR: Failed to download environments after $download_attempts attempts"
            return 1
        fi
        
        echo "Download failed, retrying in $((attempt * 10)) seconds..."
        sleep $((attempt * 10))
    done
    
    # Validate downloaded environment files
    echo "=== Validating Downloaded Environment Files ==="
    
    # Check if the directory is empty or doesn't contain .env files
    if [ ! -d "$${SCRIPT_DIR}" ] || [ -z "$(ls -A "$${SCRIPT_DIR}"/*.env 2>/dev/null)" ]; then
        echo "ERROR: No .env files found in $${SCRIPT_DIR}"
        return 1
    fi
    
    # Check for required files
    if [ ! -f "$${SCRIPT_DIR}/00-shared-functions.env" ]; then
        echo "ERROR: Required file missing: 00-shared-functions.env"
        return 1
    fi
    
    if [ ! -f "$${SCRIPT_DIR}/k8s-setup-main.env" ]; then
        echo "ERROR: Required file missing: k8s-setup-main.env"
        return 1
    fi
    
    # Capture environment before sourcing
    echo "Capturing initial environment..."
    env | sort > /tmp/env_before.txt

    # Source all environment files from the correct directory
    echo "=== Sourcing Environment Files ==="
    for env_file in "$${SCRIPT_DIR}"/*.env; do
      if [ -f "$env_file" ]; then
        echo "Sourcing $env_file..."
        set -a
        # shellcheck source=/dev/null
        source "$env_file"
        set +a
      fi
    done
    
    # Capture environment after sourcing
    echo "=== Environment Changes ==="
    env | sort > /tmp/env_after.txt

    echo "New/Changed variables:"
    diff /tmp/env_before.txt /tmp/env_after.txt | grep '^>' | sed 's/^> /  /' || echo "  No new variables detected"

# Cleanup
  # rm -f /tmp/env_before.txt /tmp/env_after.txt
    
    echo "✓ Script Environment sourcing completed"

    # Make all scripts executable
    chmod +x "$${SCRIPT_DIR}"/*.sh

    # Make all scripts executable
    chmod +x "$${SCRIPT_DIR}"/*.sh
    
    echo "✓ Script validation completed"
    echo "Available scripts:"
    ls -la "$${SCRIPT_DIR}"
}

# =================================================================
# SCRIPT EXECUTION
# =================================================================
execute_setup_scripts() {
    echo "=== Executing Setup Scripts ==="
    
    # Set environment variables for the scripts
    export SCRIPT_EXECUTION_MODE="entrypoint"
    
    # Execute the main orchestrator script
    local entry_script="$${SCRIPT_DIR}/entrypoint.sh"
    
    if [ -f "$entry_script" ]; then
        echo "Starting main setup script: $entry_script"
        
        if "$entry_script"; then
            echo "✓ Setup completed successfully"
            return 0
        else
            local exit_code=$?
            echo "✗ Setup script failed with exit code $exit_code"
            return 1
        fi
    else
        echo "ERROR: Entry setup script not found: $entry_script"
        return 1
    fi
}

# Robust AWS CLI installation function for Ubuntu 22.04 ARM64
# Usage: Can be called directly as user_data or sourced and called as function

install_aws_cli_robust() {
    exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
    set -e

    echo "Starting AWS CLI installation at $(date)"

    # Function to wait for apt lock to be released
    wait_for_apt() {
        local timeout=300
        local count=0
        echo "Waiting for apt lock to be released..."
        
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
            if [ $count -ge $timeout ]; then
                echo "Timeout waiting for apt lock"
                return 1
            fi
            echo "Waiting for apt lock... ($count/$timeout)"
            sleep 5
            count=$((count + 5))
        done
        echo "APT lock released"
    }

    # Function to retry commands
    retry() {
        local retries=$1
        local delay=$2
        shift 2
        local count=0
        
        until "$@"; do
            exit_code=$?
            count=$((count + 1))
            if [ $count -lt $retries ]; then
                echo "Command failed (attempt $count/$retries), retrying in $delay seconds..."
                sleep $delay
            else
                echo "Command failed after $retries attempts"
                return $exit_code
            fi
        done
        return 0
    }

    # Wait for network connectivity
    echo "Checking network connectivity..."
    retry 12 10 ping -c 1 8.8.8.8

    # Wait for apt to be available
    wait_for_apt

    # Disable automatic updates during our installation
    systemctl stop unattended-upgrades 2>/dev/null || true
    systemctl disable unattended-upgrades 2>/dev/null || true

    # Kill any running apt processes (be careful with this)
    pkill -f apt-get 2>/dev/null || true
    pkill -f dpkg 2>/dev/null || true
    sleep 5

    # Wait again for apt lock
    wait_for_apt

    echo "Updating package lists..."
    retry 3 30 apt-get update -y

    echo "Installing prerequisites..."
    retry 3 30 apt-get install -y curl unzip

    # Check if AWS CLI is already installed
    if command -v aws >/dev/null 2>&1; then
        echo "AWS CLI already installed: $(aws --version)"
        echo "Skipping installation"
        return 0
    fi

    # Download AWS CLI with retries and verification
    echo "Downloading AWS CLI v2 for ARM64..."
    cd /tmp
    retry 5 10 curl -L "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"

    # Verify download
    if [ ! -f "awscliv2.zip" ] || [ ! -s "awscliv2.zip" ]; then
        echo "ERROR: AWS CLI download failed or file is empty"
        return 1
    fi

    echo "Extracting AWS CLI..."
    unzip -q awscliv2.zip

    echo "Installing AWS CLI..."
    ./aws/install

    # Clean up
    rm -rf awscliv2.zip aws/

    # Create symlinks for easier access
    ln -sf /usr/local/bin/aws /usr/bin/aws 2>/dev/null || true
    ln -sf /usr/local/bin/aws_completer /usr/bin/aws_completer 2>/dev/null || true

    # Verify installation
    echo "Verifying AWS CLI installation..."
    if /usr/local/bin/aws --version; then
        echo "AWS CLI installed successfully: $(/usr/local/bin/aws --version)"
    else
        echo "ERROR: AWS CLI installation verification failed"
        return 1
    fi

    # Re-enable automatic updates
    systemctl enable unattended-upgrades 2>/dev/null || true
    systemctl start unattended-upgrades 2>/dev/null || true

    echo "AWS CLI installation completed successfully at $(date)"
    return 0
}


# =================================================================
# MAIN EXECUTION
# =================================================================
main() {
    echo "=== Starting EC2 Node Initialization ==="

    if ! install_aws_cli_robust; then
      echo "FATAL: Faile to load AWS CLI"
      exit 1
    fi

    if ! download_and_validate_environments; then
        echo "FATAL: Environment download/validation failed"
        exit 1
    fi
    
    if ! execute_setup_scripts; then
        echo "FATAL: Setup execution failed"
        exit 1
    fi

    echo "=== EC2 Node Initialization Finished Successfully ==="
}

# Execute the main function
main
