#!/bin/bash

# Stop execution if any command fails
set -e

# =================================================================
# VARIABLES
# These variables are expected to be interpolated by Terraform's templatefile function.
# =================================================================
DOWNLOAD_DIR="${download_dir}"
S3_BUCKET="${s3_bucket}"
NODE_TYPE="${node_type}"

echo "$DOWNLOAD_DIR: $DOWNLOAD_DIR"
echo "$S3_BUCKET: $S3_BUCKET"
echo "$NODE_TYPE: $NODE_TYPE"

# =================================================================
# ENVIRONMENT FILES DOWNLOAD AND VALIDATION
# =================================================================
download_and_validate_environments() {
    echo "=== Downloading Environment files from S3 ==="
    
    local ENV_DIR="$DOWNLOAD_DIR"
    
    # Create the directory path if it doesn't exist
    mkdir -p "$ENV_DIR"
    echo "Created $ENV_DIR"

    # Download with retries
    local download_attempts=3
    local attempt
    for attempt in $(seq 1 $download_attempts); do
        echo "Download attempt $attempt/$download_attempts..."
        
        # Attempt to copy files from S3
        if aws s3 cp "s3://$S3_BUCKET/scripts/$NODE_TYPE/" "$ENV_DIR/" --recursive --quiet; then
            echo "Environment files downloaded successfully"
        fi

        if aws s3 cp "s3://$S3_BUCKET/scripts/shared/" "$ENV_DIR/" --recursive --quiet; then
            echo "Script files downloaded successfully"
            break
        fi

        
        if [ "$attempt" -eq "$download_attempts" ]; then
            echo "ERROR: Failed to download environments after $download_attempts attempts"
            return 1
        fi
        
        echo "Download failed, retrying in $((attempt * 10)) seconds..."
        sleep $((attempt * 10))
    done
    
    # Validate downloaded environment files
    echo "=== Validating Downloaded Environment Files ==="
    
    # Check if the directory is empty or doesn't contain .env files
    if [ ! -d "$ENV_DIR" ] || [ -z "$(ls -A "$ENV_DIR"/*.env 2>/dev/null)" ]; then
        echo "ERROR: No .env files found in $ENV_DIR"
        return 1
    fi
    
    # Check for required files
    if [ ! -f "$ENV_DIR/00-shared-functions.env" ]; then
        echo "ERROR: Required file missing: 00-shared-functions.env"
        return 1
    fi
    
    if [ ! -f "$ENV_DIR/k8s-setup-main.env" ]; then
        echo "ERROR: Required file missing: k8s-setup-main.env"
        return 1
    fi
    
    # Source all environment files from the correct directory
    echo "=== Sourcing Environment Files ==="
    for env_file in "$ENV_DIR"/*.env; do
      if [ -f "$env_file" ]; then
        echo "Sourcing $env_file..."
        set -a
        # shellcheck source=/dev/null
        source "$env_file"
        set +a
      fi
    done
    
    echo "✓ Script Environment sourcing completed"

    # Make all scripts executable
    chmod +x "$DOWNLOAD_DIR"/*.sh

    # Make all scripts executable
    chmod +x "$DOWNLOAD_DIR"/*.sh
    
    echo "✓ Script validation completed"
    echo "Available scripts:"
    ls -la "$DOWNLOAD_DIR"/*.sh
}

# =================================================================
# SCRIPT EXECUTION
# =================================================================
execute_setup_scripts() {
    echo "=== Executing Setup Scripts ==="
    
    # Set environment variables for the scripts
    export SCRIPT_EXECUTION_MODE="entrypoint"
    
    # Execute the main orchestrator script
    local entry_script="$DOWNLOAD_DIR/entrypoint.sh"
    
    if [ -f "$entry_script" ]; then
        echo "Starting main setup script: $entry_script"
        
        if "$entry_script"; then
            echo "✓ Setup completed successfully"
            return 0
        else
            local exit_code=$?
            echo "✗ Setup script failed with exit code $exit_code"
            return 1
        fi
    else
        echo "ERROR: Entry setup script not found: $entry_script"
        return 1
    fi
}

# =================================================================
# MAIN EXECUTION
# =================================================================
main() {
    echo "=== Starting EC2 Node Initialization ==="

    if ! download_and_validate_environments; then
        echo "FATAL: Environment download/validation failed"
        exit 1
    fi
    
    if ! execute_setup_scripts; then
        echo "FATAL: Setup execution failed"
        exit 1
    fi

    echo "=== EC2 Node Initialization Finished Successfully ==="
}

# Execute the main function
main
