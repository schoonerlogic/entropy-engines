#!/bin/bash
# entrypoint.sh.tftpl - Improved version
set -euxo pipefail

# =================================================================
# CONFIGURATION
# =================================================================
readonly DOWNLOAD_DIR="${script_dir}"
readonly LOG_DIR="${log_dir}"
readonly MAIN_LOG="$${LOG_DIR}/entrypoint.log"
readonly S3_BUCKET="${s3_bucket_name}"
readonly NODE_TYPE="${node_type}"
readonly MAX_NETWORK_ATTEMPTS=30
readonly MAX_APT_ATTEMPTS=20
readonly AWS_CLI_TIMEOUT=180

# =================================================================
# LOGGING SETUP
# =================================================================
setup_logging() {
    mkdir -p "$${LOG_DIR}"
    chown "$(whoami)" "$${LOG_DIR}" 2>/dev/null || true
    
    # Setup log redirection (safer method)
    exec >> "$MAIN_LOG" 2>&1
    
    echo "=== Entrypoint started at $(date) ==="
    echo "S3 Bucket: $${S3_BUCKET}"
    echo "Download Dir: $${DOWNLOAD_DIR}"
    echo "Log Dir: $${LOG_DIR}"
}

# =================================================================
# NETWORK VALIDATION (Enhanced)
# =================================================================
wait_for_network() {
    local attempt=0
    local token_ttl=30

    echo "=== Network Validation (IMDSv2) ==="

    while [ "$attempt" -lt "$MAX_NETWORK_ATTEMPTS" ]; do
        attempt=$((attempt + 1))
        
        # Progressive backoff
        if [ "$attempt" -gt 1 ]; then
            local delay
            if [ "$attempt" -le 5 ]; then
                delay=$((attempt * 2))
            else
                delay=$((10 + (attempt - 5) * 3))
            fi
            
            # Add jitter (1-5 seconds)
            local jitter=$((RANDOM % 5 + 1))
            local sleep_time=$((delay + jitter))
            
            printf "Network retry %02d/%02d in %02ds...\n" \
                   "$attempt" "$MAX_NETWORK_ATTEMPTS" "$sleep_time"
            sleep "$sleep_time"
        fi

        # Try to get IMDSv2 token with timeout
        local token
        if token=$(timeout 10 curl -sSf -X PUT \
                     "http://169.254.169.254/latest/api/token" \
                     -H "X-aws-ec2-metadata-token-ttl-seconds: $token_ttl" \
                     --connect-timeout 3 --retry 1 2>/dev/null); then
            
            # Validate token by fetching instance ID
            local instance_id
            if instance_id=$(timeout 10 curl -sSf \
                               -H "X-aws-ec2-metadata-token: $${token}" \
                               --connect-timeout 3 --retry 1 \
                               "http://169.254.169.254/latest/meta-data/instance-id" 2>/dev/null); then
                echo "✓ Network validated (Instance: $${instance_id})"
                export AWS_METADATA_TOKEN="$${token}"  # Export for later use
                return 0
            fi
        fi

        # Final attempt debugging
        if [ "$attempt" -eq "$MAX_NETWORK_ATTEMPTS" ]; then
            echo "✗ Network validation failed - diagnostics:"
            echo "Network interfaces:"
            ip -br -c addr show 2>/dev/null || ip addr show 2>/dev/null || true
            echo "Routes:"
            ip -c route show 2>/dev/null || route -n 2>/dev/null || true
            echo "DNS:"
            cat /etc/resolv.conf 2>/dev/null || true
            echo "Metadata service test:"
            curl -v --connect-timeout 5 http://169.254.169.254/ 2>&1 || true
        fi
    done

    echo "FATAL: Network validation failed after $MAX_NETWORK_ATTEMPTS attempts"
    return 1
}

# =================================================================
# BASIC APT PREPARATION (Lightweight)
# =================================================================
prepare_apt_basic() {
    echo "=== Basic APT Preparation ==="
    
    # Just ensure apt isn't locked by cloud-init processes
    local attempt=0
    while [ "$attempt" -lt "$MAX_APT_ATTEMPTS" ]; do
        if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
           ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
            echo "✓ APT is available"
            return 0
        fi
        
        attempt=$((attempt + 1))
        echo "APT locked, waiting... ($attempt/$MAX_APT_ATTEMPTS)"
        sleep 15
    done
    
    echo "WARNING: APT still locked after $MAX_APT_ATTEMPTS attempts"
    echo "Shared functions will handle this more robustly"
    return 0  # Don't fail here, let shared functions handle it
}

# =================================================================
# AWS CLI INSTALLATION (Enhanced)
# =================================================================
install_aws_cli() {
    if command -v aws >/dev/null 2>&1; then
        echo "✓ AWS CLI already installed: $(aws --version)"
        return 0
    fi
    echo "=== Installing AWS CLI ==="
    
    # Update package list (basic retry)
    local apt_attempts=3
    local i
    for i in $(seq 1 "$apt_attempts"); do
        if apt-get update -y >/dev/null 2>&1; then
            break
        elif [ "$i" -eq "$apt_attempts" ]; then
            echo "WARNING: apt-get update failed, continuing anyway"
        fi
        sleep 10
    done
    
    # Install prerequisites
    if ! apt-get install -y --no-install-recommends \
         curl unzip ca-certificates >/dev/null 2>&1; then
        echo "ERROR: Failed to install AWS CLI prerequisites"
        return 1
    fi
    
    # Download and install AWS CLI with timeout
    local aws_url="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip"
    local download_attempts=3
    local attempt
    
    for attempt in $(seq 1 "$download_attempts"); do
        echo "Downloading AWS CLI (attempt $attempt/$download_attempts)..."
        
        if timeout "$AWS_CLI_TIMEOUT" curl --retry 2 --retry-delay 10 \
             -sSL "$aws_url" -o /tmp/awscliv2.zip; then
            
            if unzip -q /tmp/awscliv2.zip -d /tmp && \
               /tmp/aws/install >/dev/null 2>&1; then
                rm -rf /tmp/awscliv2.zip /tmp/aws
                echo "✓ AWS CLI installed: $(aws --version)"
                return 0
            fi
        fi
        
        if [ "$attempt" -lt "$download_attempts" ]; then
            sleep $((attempt * 10))
        fi
    done
    
    echo "ERROR: Failed to install AWS CLI after $download_attempts attempts"
    return 1
}

# =================================================================
# SCRIPT DOWNLOAD AND VALIDATION
# =================================================================
download_and_validate_scripts() {
    echo "=== Downloading Scripts from S3 ==="
    
    mkdir -p "$${DOWNLOAD_DIR}"
    
    # Download with retries
    local download_attempts=3
    local attempt
    for attempt in $(seq 1 "$download_attempts"); do
        echo "Download attempt $attempt/$download_attempts..."
        
        if aws s3 cp "s3://$${S3_BUCKET}/scripts/$${node_type}" "$${DOWNLOAD_DIR}/" \
           --recursive --quiet; then
            echo "✓ Scripts downloaded successfully"
            break
        fi

        
        if [ "$attempt" -eq "$download_attempts" ]; then
            echo "ERROR: Failed to download scripts after $download_attempts attempts"
            return 1
        fi
        
        echo "Download failed, retrying in $((attempt * 10)) seconds..."
        sleep $((attempt * 10))
    done
    
    # Validate downloaded scripts
    echo "=== Validating Downloaded Scripts ==="
    
    if [ ! -d "$${DOWNLOAD_DIR}" ] || [ -z "$(ls -A "$${DOWNLOAD_DIR}"/*.sh 2>/dev/null)" ]; then
        echo "ERROR: No scripts found in $${DOWNLOAD_DIR}"
        return 1
    fi
    
    # Check for required files
    local required_files=(
        "00-shared-functions.sh"
        "k8s-setup-main.sh"
    )
    local file
    
    for file in "$${required_files[@]}"; do
        if [ ! -f "$${DOWNLOAD_DIR}/$file" ]; then
            echo "ERROR: Required file missing: $file"
            return 1
        fi
    done
    
    # Make all scripts executable
    chmod +x "$${DOWNLOAD_DIR}"/*.sh
    
    echo "✓ Script validation completed"
    echo "Available scripts:"
    ls -la "$${DOWNLOAD_DIR}"/*.sh
}

# =================================================================
# SCRIPT EXECUTION (Integrated with shared functions)
# =================================================================
execute_setup_scripts() {
    echo "=== Executing Setup Scripts ==="
    
    # Set environment variables for the scripts
    export SCRIPT_EXECUTION_MODE="entrypoint"
    
    # Execute the main orchestrator script
    local main_script="$${DOWNLOAD_DIR}/k8s-setup-main.sh"
    
    if [ -f "$${main_script}" ]; then
        echo "Starting main setup script: $${main_script}"
        
        if "$${main_script}"; then
            echo "✓ Setup completed successfully"
            return 0
        else
            local exit_code=$?
            echo "✗ Setup script failed with exit code $exit_code"
            return 1
        fi
    else
        echo "ERROR: Main setup script not found: $${main_script}"
        return 1
    fi
}

# =================================================================
# ERROR HANDLING
# =================================================================
cleanup_on_error() {
    local exit_code=$?
    echo "=== Cleanup on Error (Exit Code: $exit_code) ==="
    
    # Log final system state for debugging
    echo "Final system state:"
    echo "Disk usage:"
    df -h || true
    echo "Memory usage:"
    free -h || true
    echo "Process list:"
    ps aux | head -20 || true
    
    # Don't cleanup download dir on error for debugging
    echo "Scripts preserved in $${DOWNLOAD_DIR} for debugging"
    
    exit "$exit_code"
}

trap cleanup_on_error ERR

# =================================================================
# MAIN EXECUTION
# =================================================================
main() {
    setup_logging
    
    if ! wait_for_network; then
        echo "FATAL: Network initialization failed"
        exit 1
    fi
    
    prepare_apt_basic
    
    if ! install_aws_cli; then
        echo "FATAL: AWS CLI installation failed"
        exit 1
    fi
    
    if ! download_and_validate_scripts; then
        echo "FATAL: Script download/validation failed"
        exit 1
    fi
    
    if ! execute_setup_scripts; then
        echo "FATAL: Setup execution failed"
        exit 1
    fi
    
    echo "=== Entrypoint completed successfully at $(date) ==="
    echo "Full logs available at: $${MAIN_LOG}"
}

# Execute main function
main "$@"
