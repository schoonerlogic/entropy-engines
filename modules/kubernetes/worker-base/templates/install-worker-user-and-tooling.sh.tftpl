#!/bin/bash
#oi

set -euxo pipefail 

# Comprehensive wait function (use ONCE at start)
wait_for_apt_lock_comprehensive() {
    echo "Comprehensive apt lock wait..."
    local max_attempts=60  # 10 minutes
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
           ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1 && \
           ! fuser /var/cache/apt/archives/lock >/dev/null 2>&1 && \
           ! fuser /var/lib/dpkg/lock >/dev/null 2>&1; then
            
            if ! pgrep -f "apt|dpkg|unattended-upgrade" >/dev/null 2>&1; then
                echo "All apt locks released, proceeding..."
                return 0
            fi
        fi
        
        echo "Apt locked (attempt $((attempt + 1))/$max_attempts). Waiting 10 seconds..."
        lsof /var/lib/dpkg/lock-frontend /var/lib/apt/lists/lock 2>/dev/null || true
        sleep 10
        ((attempt++))
    done
    
    echo "ERROR: Could not acquire apt lock after $max_attempts attempts"
    return 1
}

# Quick wait function (use BEFORE each apt command)
wait_for_apt_lock_quick() {
    local max_attempts=12  # 2 minutes max
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
           ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
            return 0
        fi
        
        echo "Quick apt lock check (attempt $((attempt + 1))/$max_attempts)..."
        sleep 10
        ((attempt++))
    done
    
    echo "WARNING: Quick apt lock check failed, trying anyway..."
    return 1
}

# Wait for unattended-upgrades (use ONCE at start)
wait_for_unattended_upgrades() {
    echo "Waiting for unattended-upgrades to complete..."
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if ! pgrep -f unattended-upgrade >/dev/null 2>&1; then
            echo "Unattended-upgrades completed"
            return 0
        fi
        
        echo "Unattended-upgrades running (attempt $((attempt + 1))/$max_attempts)..."
        sleep 10
        ((attempt++))
    done
    
    echo "WARNING: Unattended-upgrades timeout"
    return 1
}


sleep 30  # Let the system settle
wait_for_unattended_upgrades
wait_for_apt_lock_comprehensive

# ============================
# MAIN SCRIPT EXECUTION 
# ============================

echo "=== Kubernetes Package Installation ==="

sudo mkdir -p /var/log/terraform-provisioning
sudo chown "$(whoami):$(whoami)" /var/log/terraform-provisioning

LOG_FILE="/var/log/terraform-provisioning/install-user-and-tooling.log"
touch $LOG_FILE
chmod 644 $LOG_FILE
exec > >(tee -a $LOG_FILE) 2>&1

echo "Install user/tooling script started at $(date) in $(pwd)" # Add timestamp/context


LOG_FILE="/var/log/install-user-and-tooling.log"

touch $LOG_FILE
chmod 644 $LOG_FILE
exec > >(tee -a $LOG_FILE) 2>&1

echo "Install user/tooling script started at $(date) in $(pwd)" # Add timestamp/context

# --- Configuration Variables (Passed from Terraform Templatefile) ---
# Ensure these are provided by your templatefile data source's 'vars' map
TARGET_USER="${k8s_user}"
K8S_REPO_STREAM="${k8s_major_minor_stream}" # e.g., 1.33 (used for repo URL)
K8S_PKG_VERSION_STRING="${k8s_package_version_string}" # e.g., 1.33.1-00 (used for apt install)
K8S_KEYRING_DIR=/etc/apt/keyrings
K8S_KEYRING_FILE=$K8S_KEYRING_DIR/kubernetes-apt-keyring.gpg


echo "=== Control Plane Bootstrap Started ==="
echo "Cluster User: $TARGET_USER"
echo "K8S Repo Version: $K8S_REPO_STREAM"
echo "K8S Pkg Version: $K8S_PKG_VERSION_STRING"

# --- Fetch Instance Private IP ---
echo "Fetching instance private IP from metadata..."
for i in {1..5}; do
    # First, get a session token
    TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
    
    if [ -n "$TOKEN" ]; then
        # Use the token to get the private IP
        INSTANCE_PRIVATE_IP=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)
        if [ -n "$INSTANCE_PRIVATE_IP" ]; then
            break # Exit loop on success
        fi
    fi
    echo "Attempt $i to fetch metadata failed. Retrying in 5 seconds..."
    sleep 5
done

# Fail if the IP is still empty after all retries
if [ -z "$INSTANCE_PRIVATE_IP" ]; then
    echo "FATAL: Could not determine instance private IP from metadata service after multiple retries."
fi

echo "=== Debugging AWS Credentials ==="
curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
  http://169.254.169.254/latest/meta-data/iam/security-credentials/

# Check if AWS CLI can see the credentials
aws configure list
aws sts get-caller-identity


# --- User Setup ---
# Create user if they don't exist
if ! id "$TARGET_USER" &>/dev/null; then
    echo "Creating user $TARGET_USER..."
    useradd -m -s /bin/bash "$TARGET_USER"
    passwd -d "$TARGET_USER" # Ensure password login is disabled if desired
else
    echo "User $TARGET_USER already exists."
fi

# Configure passwordless sudo
echo "$TARGET_USER ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$TARGET_USER" # Use > instead of | sudo tee
chmod 440 "/etc/sudoers.d/$TARGET_USER"

# Set up SSH key authentication from EC2 metadata using IMDSv2
# TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
SSH_PUBLIC_KEY=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -fsSL http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key || echo "Failed to fetch SSH key from metadata")

if [[ -n "$SSH_PUBLIC_KEY" && "$SSH_PUBLIC_KEY" != "Failed to fetch"* ]]; then
    USER_SSH_DIR="/home/$TARGET_USER/.ssh"
    mkdir -p "$USER_SSH_DIR"
    echo "$SSH_PUBLIC_KEY" > "$USER_SSH_DIR/authorized_keys"
    chmod 700 "$USER_SSH_DIR"
    chmod 600 "$USER_SSH_DIR/authorized_keys"
    chown -R "$TARGET_USER:$TARGET_USER" "$USER_SSH_DIR" # Assuming group name matches username
    echo "SSH key configured for $TARGET_USER"
else
    echo "Warning: Could not retrieve SSH public key for $TARGET_USER."
    # Decide if this is a fatal error? If SSH is essential, add 'exit 1'
fi

echo "Starting Kubernetes setup on EC2..."

# Disable swap
swapoff -a
sed -i.bak '/ swap / s/^/#/' /etc/fstab # Added .bak for safety

# Enable kernel modules
modprobe overlay
modprobe br_netfilter
echo -e "overlay\nbr_netfilter" > /etc/modules-load.d/k8s.conf # Use > instead of tee
echo "net.ipv4.ip_forward = 1" | tee /etc/sysctl.d/k8s.conf

# Configure sysctl params
echo "net.bridge.bridge-nf-call-iptables = 1" > /etc/sysctl.d/k8s.conf # Added bridge setting often needed
echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.d/k8s.conf # Use >> to append
sysctl --system # Reload sysctl settings

# Install dependencies
export DEBIAN_FRONTEND=noninteractive

wait_for_apt_lock_quick() {
apt-get update
   
wait_for_apt_lock_quick() {
apt-get install -y apt-transport-https ca-certificates curl gpg jq

# Create keyring directory and download the GPG key
echo "Setting up Kubernetes APT repository for stream v$K8S_REPO_STREAM ...."
sudo mkdir -p "$K8S_KEYRING_DIR"
sudo curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$K8S_REPO_STREAM/deb/Release.key" \
  | gpg --dearmor -o "$K8S_KEYRING_FILE" || {
    echo "Failed to download k8s gpg key for stream v$K8S_REPO_STREAM"; exit 1;
  }

echo "deb [signed-by=$K8S_KEYRING_FILE] https://pkgs.k8s.io/core:/stable:/v$K8S_REPO_STREAM/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update APT and install Kubernetes packages
echo "Installing Kubernetes packages: kubelet=$K8S_PKG_VERSION_STRING, kubeadm=$K8S_PKG_VERSION_STRING, kubectl=$K8S_PKG_VERSION_STRING"
wait_for_apt_lock_quick() {
sudo apt-get update

if ! sudo apt-get install -y \
  kubelet="$K8S_PKG_VERSION_STRING" \
  kubeadm="$K8S_PKG_VERSION_STRING" \
  kubectl="$K8S_PKG_VERSION_STRING"; then
    echo "Failed to install specific Kubernetes package versions. Trying to find them..."
    echo "Available kubeadm versions:"
    apt-cache madison kubeadm
    exit 1
fi

apt-mark hold kubelet kubeadm kubectl

wait_for_apt_lock_quick() {
apt-get install -y containerd
echo "Configuring containerd for Kubernetes..."

# 1. Create containerd config directory (if not exists)
mkdir -p /etc/containerd

# 2. Generate #efault config ONLY if it doesn't exist (prevent overwriting customizations)
if [ ! -f /etc/containerd/config.toml ]; then
    echo "Generating default containerd config..."
    containerd config default > /etc/containerd/config.toml || {
        echo "Failed to generate default config";
        exit 1;
    }
else
    echo "Existing config.toml found - preserving it."
fi

# 3. CRI Plugin Check (modern containerd versions don't disable CRI by default)
if grep -q 'disabled_plugins.*cri' /etc/containerd/config.toml; then
    echo "Disabling CRI plugin override..."
    sed -i 's/^disabled_plugins = \["cri"\]/#disabled_plugins = ["cri"]/' /etc/containerd/config.toml
else
    echo "CRI plugin already enabled (no action needed)"
fi

# 4. Systemd Cgroup (critical for Kubernetes)
echo "Enabling SystemdCgroup..."
sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/' /etc/containerd/config.toml

# 5. Restart with checks
echo "Restarting containerd..."
systemctl restart containerd || {
    echo "Containerd restart failed! Debug with: journalctl -u containerd";
    exit 1;
}

# 6. Verify runtime is operational
timeout 10 bash -c 'until ctr version >/dev/null 2>&1; do sleep 1; done' || {
    echo "Containerd did not start properly!";
    ctr version  # Explicitly call to show error
    exit 1;
}

echo "Containerd configured successfully!"

echo "-----------------------------------------------------"
echo "Kubernetes control plane setup completed successfully!"
echo "-----------------------------------------------------"
