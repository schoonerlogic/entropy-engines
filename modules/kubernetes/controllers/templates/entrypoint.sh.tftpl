#!/bin/bash
set -euxo pipefail

wait_for_network() {
    local max_attempts=30
    local attempt=0
    local token_ttl=30

    echo "Starting network validation (IMDSv2)"

    while [ $${attempt} -lt $${max_attempts} ]; do
        attempt=$((attempt + 1))
        
        # Smart backoff calculation
        base_delay=$(( attempt < 5 ? attempt * 1 : attempt * 2 ))
        jitter=$(( RANDOM % 7 + 3 ))
        sleep_time=$(( base_delay + jitter ))
        
        printf "Attempt %02d/%02d: Retry in %02ds\n" \
               $${attempt} $${max_attempts} $${sleep_time}

        # IMDSv2 token fetch with validation
        if token=$(curl -sSf -X PUT "http://169.254.169.254/latest/api/token" \
                     -H "X-aws-ec2-metadata-token-ttl-seconds: $${token_ttl}" \
                     --connect-timeout 3 --retry 2 2>/dev/null); then
            
            if instance_id=$(curl -sSf -H "X-aws-ec2-metadata-token: $${token}" \
                               --connect-timeout 3 --retry 2 \
                               "http://169.254.169.254/latest/meta-data/instance-id" 2>/dev/null); then
                echo " Verified network (Instance: $${instance_id})"
                return 0
            fi
        fi

        [ $${attempt} -eq $${max_attempts} ] && {
            echo " Final attempt failed - dumping network state:"
            ip -br -c addr show || true
            ip -c route show || true
            cat /etc/resolv.conf || true
        }
        
        sleep $${sleep_time}
    done

    exit 1
}

# Main execution
if ! wait_for_network; then
  echo "FATAL: Network bootstrap failed" >&2
  exit 1
fi

# Continue with your bootstrap scripts
DOWNLOAD_DIR="/tmp/k8s-scripts"
mkdir -p "$${DOWNLOAD_DIR}"
aws s3 cp "s3://${s3_bucket_name}/scripts/" "$${DOWNLOAD_DIR}/" --recursive

# --- APT lock handling ---
wait_for_apt_lock() {
    echo "Checking for apt locks..."
    local max_wait=300  # 5 minutes max
    local start_time=$(date +%s)
    
    while [ $(($(date +%s) - $${start_time})) -lt $${max_wait} ]; do
        if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
           ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
            echo "No apt locks detected"
            return 0
        fi
        echo "Waiting for apt locks to be released..."
        sleep 10
    done
    
    echo "ERROR: Timed out waiting for apt locks"
    return 1
}

# --- Main execution ---
if ! wait_for_network; then
    echo "FATAL: Network initialization failed"
    exit 1
fi

# Install AWS CLI if needed
if ! command -v aws &>/dev/null; then
    echo "Installing AWS CLI..."
    
    if ! wait_for_apt_lock; then
        exit 1
    fi
    
    apt-get update -y
    
    if ! wait_for_apt_lock; then
        exit 1
    fi
    
    apt-get install -y --no-install-recommends curl unzip ca-certificates
    
    # Retry logic for AWS CLI download
    for attempt in {1..3}; do
        if curl --retry 3 --retry-delay 5 -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o /tmp/awscliv2.zip; then
            unzip -q /tmp/awscliv2.zip -d /tmp
            /tmp/aws/install
            rm -rf /tmp/awscliv2.zip /tmp/aws
            break
        elif [ $${attempt} -eq 3 ]; then
            echo "FATAL: Failed to install AWS CLI after 3 attempts"
            exit 1
        fi
        sleep $((attempt * 5))
    done
fi

# Download scripts from S3 with retries
echo "Downloading scripts from s3://${s3_bucket_name}..."
for attempt in {1..3}; do
    if aws s3 cp "s3://${s3_bucket_name}/scripts/" "$${DOWNLOAD_DIR}/" --recursive; then
        break
    fi
    
    echo "Download attempt $${attempt} failed"
    if [ $${attempt} -eq 3 ]; then
        echo "FATAL: Failed to download scripts after 3 attempts"
        exit 1
    fi
    sleep $((attempt * 5))
done

# Execute scripts in order
if [ -n "$(ls -A $${DOWNLOAD_DIR}/*.sh 2>/dev/null)" ]; then
    echo "Executing setup scripts..."
    for script in $(find "$${DOWNLOAD_DIR}" -name '*.sh' | sort -V); do
        echo "Running $${script}"
        chmod +x "$${script}"
        if ! "$${script}"; then
            echo "ERROR: Script $${script} failed"
            exit 1
        fi
    done
else
    echo "WARNING: No scripts found in $${DOWNLOAD_DIR}"
fi

echo "User data execution completed successfully"
