#!/bin/bash
# Kubernetes Controller Configuration Script

set -euxo pipefail

# --- Logging Setup ---
sudo mkdir -p /var/log/terraform-provisioning
sudo chown "$(whoami):$(whoami)" /var/log/terraform-provisioning
LOG_FILE="/var/log/terraform-provisioning/configure-control-plane.log"
exec > >(tee -a "$LOG_FILE") 2>&1

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

handle_error() {
    log "ERROR: $1"
    exit 1
}

# --- IMDSv2 Setup ---
get_metadata() {
    local token
    for attempt in {1..3}; do
        token=$(curl -X PUT "http://169.254.169.254/latest/api/token" \
            -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
            -s --max-time 10 --connect-timeout 5) && break
        sleep $((attempt * 5))
    done
    [ -z "$token" ] && handle_error "Failed to get IMDSv2 token"
    echo "$token"
}

TOKEN=$(get_metadata)
INSTANCE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s \
    http://169.254.169.254/latest/meta-data/local-ipv4) || handle_error "Failed to get instance IP"
INSTANCE_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s \
    http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region) || handle_error "Failed to get region"

# --- Role Determination ---
PRIMARY_PARAM="/k8s/${cluster_name}/primary-controller"
EXISTING_PRIMARY=$(aws ssm get-parameter --name "$PRIMARY_PARAM" \
    --query Parameter.Value --output text 2>/dev/null || echo "UNASSIGNED")

if [[ "$EXISTING_PRIMARY" == "UNASSIGNED" ]]; then
    if aws ssm put-parameter --name "$PRIMARY_PARAM" --value "$INSTANCE_IP" \
        --type "String" --overwrite --expected-value "UNASSIGNED"; then
        K8S_ROLE="primary"
        log "Successfully claimed primary controller role"
    else
        K8S_ROLE="secondary"
        log "Another node claimed primary first"
    fi
elif [[ "$EXISTING_PRIMARY" == "$INSTANCE_IP" ]]; then
    K8S_ROLE="primary"
else
    K8S_ROLE="secondary"
fi

log "Controller Role: $K8S_ROLE, Instance IP: $INSTANCE_IP"

# --- Dependency Installation ---
install_dependencies() {
    if ! command -v jq &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y jq || handle_error "Failed to install jq"
    fi
    
    if ! command -v aws &> /dev/null; then
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || handle_error "AWS CLI download failed"
        unzip awscliv2.zip || handle_error "AWS CLI extraction failed"
        sudo ./aws/install || handle_error "AWS CLI installation failed"
        rm -rf aws awscliv2.zip
    fi
}
install_dependencies

# --- Main Control Plane Logic ---
if [[ "$K8S_ROLE" == "primary" ]]; then
    # Generate kubeadm config with RUNTIME IP substitution
    cat > /tmp/kubeadm-config.yaml <<"KUBEADM_EOF"
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
nodeRegistration:
  kubeletExtraArgs: {}

---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: ${k8s_full_patch_version}
controlPlaneEndpoint: "$INSTANCE_IP:6443"
apiServer:
  certSANs:
    - "$INSTANCE_IP"
    - "kubernetes"
    - "kubernetes.default"
    - "kubernetes.default.svc"
    - "kubernetes.default.svc.cluster.local"
    - "localhost"
    - "127.0.0.1"
networking:
  podSubnet: ${pod_cidr_block}
  serviceSubnet: ${service_cidr_block}
KUBEADM_EOF

    # After generating the YAML
    if ! grep -q "\"$INSTANCE_IP\"" /tmp/kubeadm-config.yaml; then
      echo "ERROR: IP substitution failed!" >&2
      exit 1
    fi

    # Move config to proper location
    sudo mkdir -p /etc/kubeadm
    sudo mv /tmp/kubeadm-config.yaml /etc/kubeadm/kubeadm-config.yaml
    sudo chown root:root /etc/kubeadm/kubeadm-config.yaml

    # Initialize cluster if not already initialized
    if [ ! -f "/etc/kubernetes/admin.conf" ]; then
        sudo kubeadm reset -f || log "Reset completed or not needed"
        sudo kubeadm init --config /etc/kubeadm/kubeadm-config.yaml \
            --upload-certs --v=5 || handle_error "kubeadm init failed"
    fi

    # Store join information
    export KUBECONFIG=/etc/kubernetes/admin.conf
    JOIN_CMD=$(kubeadm token create --print-join-command) || handle_error "Failed to create join command"
    CERT_KEY=$(kubeadm init phase upload-certs --upload-certs 2>/dev/null | tail -1) || handle_error "Failed to get cert key"

    aws ssm put-parameter --name "${ssm_join_command_path}" \
        --value "$JOIN_CMD" --type "SecureString" --overwrite \
        --region "$INSTANCE_REGION"
    aws ssm put-parameter --name "${ssm_certificate_key_path}" \
        --value "$CERT_KEY" --type "SecureString" --overwrite \
        --region "$INSTANCE_REGION"

else  # Secondary controller logic
    # Wait for join parameters with timeout
    for ((i=0; i<40; i++)); do
        JOIN_CMD=$(aws ssm get-parameter --name "${ssm_join_command_path}" \
            --with-decryption --query Parameter.Value --output text \
            --region "$INSTANCE_REGION" 2>/dev/null || echo "")
        CERT_KEY=$(aws ssm get-parameter --name "${ssm_certificate_key_path}" \
            --with-decryption --query Parameter.Value --output text \
            --region "$INSTANCE_REGION" 2>/dev/null || echo "")
        
        [[ -n "$JOIN_CMD" && -n "$CERT_KEY" ]] && break
        sleep 15
    done

    # Perform join operation
    sudo kubeadm join $(echo "$JOIN_CMD" | sed 's/kubeadm join //') \
        --control-plane --certificate-key "$CERT_KEY" --v=5 || \
        handle_error "kubeadm join failed"
fi

log "âœ… Controller configuration completed successfully"
