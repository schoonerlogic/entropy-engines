#!/bin/bash
# modules/controllers/templates/controller-user-data.sh.tftpl
# User data template for control plane instances - downloads and executes main bootstrap script from S3

set -euo pipefail

# Template variables from Terraform
S3_SCRIPT_URI="${s3_script_uri}"
BOOTSTRAP_BUCKET_NAME="${bootstrap_bucket_name}"
CLUSTER_NAME="${cluster_name}"
K8S_USER="${k8s_user}"
K8S_MAJOR_MINOR_STREAM="${k8s_major_minor_stream}"
K8S_FULL_PATCH_VERSION="${k8s_full_patch_version}"
K8S_APT_PACKAGE_SUFFIX="${k8s_apt_package_suffix}"
SSH_PUBLIC_KEY="${ssh_public_key}"
POD_CIDR_BLOCK="${pod_cidr_block}"
SERVICE_CIDR_BLOCK="${service_cidr_block}"
SSM_JOIN_COMMAND_PATH="${ssm_join_command_path}"
SSM_CERTIFICATE_KEY_PATH="${ssm_certificate_key_path}"

# Logging setup
LOADER_LOG_FILE="/var/log/control-plane-user-data-loader.log"
touch $${LOADER_LOG_FILE} && chmod 644 $${LOADER_LOG_FILE}
exec > >(tee -a $${LOADER_LOG_FILE}) 2>&1

echo "=== Control Plane User Data Loader Started at $(date) ==="

#===============================================================================
# Ensure Required Tools Are Available
#===============================================================================
install_pkg() {
    if command -v apt-get &> /dev/null; then
        apt-get update -y && apt-get install -y --no-install-recommends "$1"
    elif command -v yum &> /dev/null; then
        yum install -y "$1"
    else
        echo "FATAL: Cannot find package manager to install $1"
        exit 1
    fi
}

for pkg in awscli jq; do
    if ! command -v $pkg &> /dev/null; then
        echo "$pkg not found. Installing..."
        install_pkg $pkg || { echo "FATAL: Failed to install $pkg"; exit 1; }
        echo "$pkg installed successfully."
    else
        echo "$pkg found: $(command -v $pkg)"
    fi
done

#===============================================================================
# Get Instance Metadata
#===============================================================================
echo "Getting instance metadata..."
TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 60" || true)
HEADERS=""
if [ -n "$TOKEN" ]; then
    HEADERS="-H \"X-aws-ec2-metadata-token: $TOKEN\""
fi
EC2_REGION=$(eval "curl -s $HEADERS http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region")
INSTANCE_ID=$(eval "curl -s $HEADERS http://169.254.169.254/latest/meta-data/instance-id")
PRIVATE_IP=$(eval "curl -s $HEADERS http://169.254.169.254/latest/meta-data/local-ipv4")
echo "Region: $${EC2_REGION}, Instance: $${INSTANCE_ID}, Private IP: $${PRIVATE_IP}"

#===============================================================================
# Determine Controller Role (Primary vs Secondary) with S3 Lock
#===============================================================================
echo "Determining controller role using S3 lock..."
S3_LOCK_URI="s3://$${BOOTSTRAP_BUCKET_NAME}/$${CLUSTER_NAME}/control-plane.lock"
CONTROLLER_ROLE="secondary"
PRIMARY_CONTROLLER_IP=""

# Try to acquire the lock. If the file exists, another node is primary.
# The `--if-none-match` ensures this is an atomic operation.
if aws s3 cp /dev/null "$${S3_LOCK_URI}" --if-none-match '*' --region "$${EC2_REGION}" 2>/dev/null; then
    CONTROLLER_ROLE="primary"
    echo "Successfully acquired S3 lock. This node is the PRIMARY controller."
    # As primary, write our IP to the lock file for secondaries to find.
    echo "$${PRIVATE_IP}" > /tmp/primary_ip.txt
    aws s3 cp /tmp/primary_ip.txt "$${S3_LOCK_URI}" --region "$${EC2_REGION}"
else
    echo "Could not acquire S3 lock. This node is a SECONDARY controller."
    echo "Waiting for primary controller IP to appear in lock file..."
    for i in {1..20}; do
        PRIMARY_CONTROLLER_IP=$(aws s3 cp "$${S3_LOCK_URI}" - --region "$${EC2_REGION}" 2>/dev/null | tr -d '[:space:]')
        if [[ -n "$${PRIMARY_CONTROLLER_IP}" ]]; then
            echo "Found primary controller IP: $${PRIMARY_CONTROLLER_IP}"
            break
        fi
        echo "Attempt $i/20: Lock file exists but is empty. Waiting..."
        sleep 15
    done
    if [[ -z "$${PRIMARY_CONTROLLER_IP}" ]]; then
        echo "FATAL: Timed out waiting for primary controller IP in S3 lock file."
        exit 1
    fi
fi

#===============================================================================
# Download and Execute Main Bootstrap Script
#===============================================================================
LOCAL_SCRIPT_PATH="/opt/control-plane-bootstrap-main.sh"
echo "Downloading main control plane script to $${LOCAL_SCRIPT_PATH}..."
aws s3 cp "$${S3_SCRIPT_URI}" "$${LOCAL_SCRIPT_PATH}" --region "$${EC2_REGION}" || {
    echo "FATAL: Failed to download script from S3 URI: $${S3_SCRIPT_URI}"; exit 1;
}
chmod +x "$${LOCAL_SCRIPT_PATH}"

echo "=== Executing main control plane bootstrap script ==="
bash "$${LOCAL_SCRIPT_PATH}" \
    --cluster-name "$${CLUSTER_NAME}" \
    --k8s-user "$${K8S_USER}" \
    --k8s-version "$${K8S_MAJOR_MINOR_STREAM}" \
    --k8s-full-version "$${K8S_FULL_PATCH_VERSION}" \
    --k8s-package-suffix "$${K8S_APT_PACKAGE_SUFFIX}" \
    --pod-cidr "$${POD_CIDR_BLOCK}" \
    --service-cidr "$${SERVICE_CIDR_BLOCK}" \
    --controller-role "$${CONTROLLER_ROLE}" \
    --instance-id "$${INSTANCE_ID}" \
    --private-ip "$${PRIVATE_IP}" \
    --region "$${EC2_REGION}" \
    --ssm-join-path "$${SSM_JOIN_COMMAND_PATH}" \
    --ssm-cert-key-path "$${SSM_CERTIFICATE_KEY_PATH}" \
    --primary-controller-ip "$${PRIMARY_CONTROLLER_IP}"

MAIN_SCRIPT_EXIT_CODE=$?

if [ $${MAIN_SCRIPT_EXIT_CODE} -eq 0 ]; then
    echo "=== Main control plane bootstrap script completed successfully ==="
    touch /var/lib/cloud/instance/user-data-finished
else
    echo "=== FATAL: Main control plane bootstrap script failed with exit code $${MAIN_SCRIPT_EXIT_CODE} ==="
    exit $${MAIN_SCRIPT_EXIT_CODE}
fi

echo "=== Control plane user data execution completed at $(date) ==="
exit 0